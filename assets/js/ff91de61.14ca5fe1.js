"use strict";(self.webpackChunkmpi_info=self.webpackChunkmpi_info||[]).push([[335],{784:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>m});var i=n(4848),r=n(8453),o=n(688),s=n(5854);const a={title:"LeetCode 1",authors:"qfortier",tags:["leetcode","devoir","programmation"]},l=void 0,c={permalink:"/mpi-info/2024/09/08/leetcode1",editUrl:"https://github.com/mpi-lamartin/mpi-info/blog/2024-09-08-leetcode1.mdx",source:"@site/blog/2024-09-08-leetcode1.mdx",title:"LeetCode 1",description:"Voici le premier exercice \xe0 faire en C sur LeetCode, au plus tard pour dimanche prochain (15 septembre)//leetcode.com/problems/longest-substring-without-repeating-characters",date:"2024-09-08T00:00:00.000Z",tags:[{inline:!0,label:"leetcode",permalink:"/mpi-info/tags/leetcode"},{inline:!0,label:"devoir",permalink:"/mpi-info/tags/devoir"},{inline:!0,label:"programmation",permalink:"/mpi-info/tags/programmation"}],hasTruncateMarker:!1,authors:[{name:"Quentin Fortier",title:"Professeur d'informatique",url:"https://fortierq.github.io/",imageURL:"https://fortierq.github.io/assets/images/photo_cv.png",key:"qfortier",page:null}],frontMatter:{title:"LeetCode 1",authors:"qfortier",tags:["leetcode","devoir","programmation"]},unlisted:!1,prevItem:{title:"Colle 1 : Langages, automates et grammaires",permalink:"/mpi-info/2024/09/11/colle1"},nextItem:{title:"Codespace GitHub",permalink:"/mpi-info/2024/09/02/codespace"}},u={authorsImageUrls:[void 0]},m=[];function p(e){const t={a:"a",br:"br",p:"p",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["Voici le premier exercice \xe0 faire en C sur LeetCode, au plus tard pour dimanche prochain (15 septembre) : ",(0,i.jsx)(t.a,{href:"https://leetcode.com/problems/longest-substring-without-repeating-characters",children:"https://leetcode.com/problems/longest-substring-without-repeating-characters"}),(0,i.jsx)(t.br,{}),"\n","Une vid\xe9o explicative pour utiliser LeetCode : ",(0,i.jsx)(t.a,{href:"https://youtu.be/q5dEFWMO8-o",children:"https://youtu.be/q5dEFWMO8-o"}),(0,i.jsx)(t.br,{}),"\n","Vous pouvez me demander de l'aide par mail."]}),"\n","\n",(0,i.jsx)(o.A,{file:s.A,lang:"c",show:!0})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},688:(e,t,n)=>{n.d(t,{A:()=>c});n(6540);var i=n(1432),r=n(4164),o=n(3551),s=n(9893);const a="details_JMAC";var l=n(4848);const c=e=>{let{file:t,lang:n,show:c,title:u="Solution",children:m}=e;return(0,l.jsxs)("div",{children:[" ",c&&(0,l.jsxs)(o.B,{className:(0,r.A)("alert alert--success",a),summary:u,children:[m&&(0,l.jsx)(s.A,{children:m}),(0,l.jsx)(i.A,{language:n,children:t})]})]})}},5854:(e,t,n)=>{n.d(t,{A:()=>i});const i="// 1ere solution : O(n^3) en regardant, pour chaque sous-cha\xeene, si elle contient un doublon\nint lengthOfLongestSubstring(char* s) {\n    int max = 0;\n    for(int i = 0; i < strlen(s); i++) {\n        int j = i + 1;\n        int b = 0;\n        while(j < strlen(s)) {\n            for(int k = i; k < j; k++) {\n                if(s[k] == s[j])\n                    b = 1;\n            }\n            if(b) break;\n            j++;\n        }\n        if(j - i > max)\n            max = j - i;\n    }\n    return max;\n}\n\n// 2eme solution : O(n^2) en conservant un tableau count pour savoir si un caract\xe8re est d\xe9j\xe0 pr\xe9sent dans la sous-cha\xeene\n// on utilise un tableau de 256 \xe9l\xe9ments pour les caract\xe8res ASCII\nint lengthOfLongestSubstring(char* s) {\n    int max = 0;\n    int n = strlen(s);\n    for(int i = 0; i < n; i++) {\n        int j = i;\n        int count[256] = {0};\n        while(j < n && count[s[j]] == 0) {\n            count[s[j]] = 1;\n            j++;\n        }\n        if(j - i > max)\n            max = j - i;\n    }\n    return max;\n}"}}]);