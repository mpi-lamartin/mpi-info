"use strict";(self.webpackChunkmpi_info=self.webpackChunkmpi_info||[]).push([[1459],{8386:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>u});var t=i(4848),r=i(8453),o=i(688),s=i(67);const a={title:"LeetCode 4",authors:"qfortier",tags:["leetcode","devoir","programmation"]},l=void 0,c={permalink:"/mpi-info/2024/09/29/leetcode4",editUrl:"https://github.com/mpi-lamartin/mpi-info/blog/2024-09-29-leetcode4.mdx",source:"@site/blog/2024-09-29-leetcode4.mdx",title:"LeetCode 4",description:"Exercice \xe0 faire en C sur LeetCode, au plus tard pour samedi prochain//leetcode.com/problems/longest-palindromic-substring/description",date:"2024-09-29T00:00:00.000Z",tags:[{inline:!0,label:"leetcode",permalink:"/mpi-info/tags/leetcode"},{inline:!0,label:"devoir",permalink:"/mpi-info/tags/devoir"},{inline:!0,label:"programmation",permalink:"/mpi-info/tags/programmation"}],hasTruncateMarker:!1,authors:[{name:"Quentin Fortier",title:"Professeur d'informatique",url:"https://fortierq.github.io/",imageURL:"https://fortierq.github.io/assets/images/photo_cv.png",key:"qfortier",page:null}],frontMatter:{title:"LeetCode 4",authors:"qfortier",tags:["leetcode","devoir","programmation"]},unlisted:!1,prevItem:{title:"LeetCode 5",permalink:"/mpi-info/2024/10/06/leetcode5"},nextItem:{title:"LeetCode 3",permalink:"/mpi-info/2024/09/21/leetcode3"}},d={authorsImageUrls:[void 0]},u=[];function m(e){const n={a:"a",br:"br",code:"code",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components},{Details:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Exercice \xe0 faire en C sur LeetCode, au plus tard pour samedi prochain : ",(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/longest-palindromic-substring/description",children:"https://leetcode.com/problems/longest-palindromic-substring/description"}),(0,t.jsx)(n.br,{}),"\n",'Un palindrome est une cha\xeene qui se lit de la m\xeame fa\xe7on dans les deux sens. Par exemple, "abba" est un palindrome. On cherche \xe0 trouver la plus grande sous-cha\xeene palindrome d\'une cha\xeene donn\xe9e.']}),"\n",(0,t.jsxs)(i,{children:[(0,t.jsx)("summary",{children:"Indice"}),(0,t.jsx)(n.p,{children:"Un algorithme na\xeff qui regarde, pour tout i, j, si la sous-cha\xeene de s de i \xe0 j est un palindrome (= qui se lit de la m\xeame fa\xe7on dans les deux sens), a une complexit\xe9 O(n^3)."}),(0,t.jsx)(n.p,{children:"Pour que le programme soit accept\xe9, on peut trouver une solution en O(n^2) par programmation dynamique. Pour cela :"}),(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"D\xe9finir un tableau b tel que b[i][j] vaut vrai si la sous-cha\xeene de s de i \xe0 j est un palindrome."}),"\n",(0,t.jsx)(n.li,{children:"Trouver une \xe9quation de r\xe9currence pour b[i][j]."}),"\n",(0,t.jsx)(n.li,{children:"Remplir le tableau b en utilisant cette \xe9quation de r\xe9currence."}),"\n",(0,t.jsx)(n.li,{children:"Trouver la plus grande sous-cha\xeene palindrome en parcourant le tableau b."}),"\n"]}),(0,t.jsx)(n.p,{children:"On pourra utiliser la fonction suivante :"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:"// Renvoie la sous-cha\xeene de s de l'indice i \xe0 j inclus\nchar* substring(char* s, int i, int j) {\n    char* t = malloc(j - i + 2);\n    for(int k = i; k <= j; k++)\n        t[k - i] = s[k];\n    t[j - i + 1] = '\\0';\n    return t;\n}\n"})})]}),"\n","\n",(0,t.jsx)(o.A,{file:s.A,lang:"c",show:!0})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},688:(e,n,i)=>{i.d(n,{A:()=>c});i(6540);var t=i(1432),r=i(4164),o=i(3551),s=i(9893);const a="details_JMAC";var l=i(4848);const c=e=>{let{file:n,lang:i,show:c,title:d="Solution",children:u}=e;return(0,l.jsxs)("div",{children:[" ",c&&(0,l.jsxs)(o.B,{className:(0,r.A)("alert alert--success",a),summary:d,children:[u&&(0,l.jsx)(s.A,{children:u}),(0,l.jsx)(t.A,{language:i,children:n})]})]})}},67:(e,n,i)=>{i.d(n,{A:()=>t});const t="#include <stdbool.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* subword(char* s, int i, int j) {\n    char* t = malloc(j - i + 2);\n    for(int k = i; k <= j; k++)\n        t[k - i] = s[k];\n    t[j - i + 1] = '\\0';\n    return t;\n}\n\nchar* longestPalindrome(char* s) {\n    int n = strlen(s);\n    bool** b = malloc(n*sizeof(bool*));\n    for(int i = 0; i < n; i++) {\n        b[i] = malloc(n*sizeof(bool));\n        for(int j = 0; j < n; j++) {\n            b[i][j] = true;\n        }\n    }\n\n    int imax = 0, kmax = 0;\n    for(int k = 1; k < n; k++)\n        for(int i = 0; i < n - k; i++) {\n            b[i][i + k] = s[i] == s[i + k] && b[i + 1][i + k - 1];\n            if(b[i][i + k]) {\n                kmax = k;\n                imax = i;\n            }\n        }\n    return subword(s, imax, imax + kmax);\n}"}}]);