"use strict";(self.webpackChunkmpi_info=self.webpackChunkmpi_info||[]).push([[713],{6727:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>m});var i=s(4848),r=s(8453),n=s(688),l=s(9262);const o={title:"LeetCode 2",authors:"qfortier",tags:["leetcode","devoir","programmation"]},c=void 0,a={permalink:"/mpi-info/2024/09/15/leetcode2",editUrl:"https://github.com/mpi-lamartin/mpi-info/blog/2024-09-15-leetcode2.mdx",source:"@site/blog/2024-09-15-leetcode2.mdx",title:"LeetCode 2",description:"Exercice \xe0 faire en C sur LeetCode, au plus tard pour samedi prochain//leetcode.com/problems/merge-two-sorted-lists",date:"2024-09-15T00:00:00.000Z",tags:[{inline:!0,label:"leetcode",permalink:"/mpi-info/tags/leetcode"},{inline:!0,label:"devoir",permalink:"/mpi-info/tags/devoir"},{inline:!0,label:"programmation",permalink:"/mpi-info/tags/programmation"}],hasTruncateMarker:!1,authors:[{name:"Quentin Fortier",title:"Professeur d'informatique",url:"https://fortierq.github.io/",imageURL:"https://fortierq.github.io/assets/images/photo_cv.png",key:"qfortier",page:null}],frontMatter:{title:"LeetCode 2",authors:"qfortier",tags:["leetcode","devoir","programmation"]},unlisted:!1,prevItem:{title:"Exercices de programmation et automates",permalink:"/mpi-info/2024/09/19/exercices"},nextItem:{title:"Colle 1 : Langages, automates et grammaires",permalink:"/mpi-info/2024/09/11/colle1"}},d={authorsImageUrls:[void 0]},m=[];function u(e){const t={a:"a",br:"br",code:"code",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components},{Details:s}=t;return s||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["Exercice \xe0 faire en C sur LeetCode, au plus tard pour samedi prochain : ",(0,i.jsx)(t.a,{href:"https://leetcode.com/problems/merge-two-sorted-lists",children:"https://leetcode.com/problems/merge-two-sorted-lists"})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:"Indice"}),(0,i.jsx)(t.p,{children:"On pourra \xe9crire une fonction r\xe9cursive."})]}),"\n",(0,i.jsxs)(t.p,{children:["Si vous avez termin\xe9 l'exercice, vous pouvez faire ce prolongement (plus difficile) : ",(0,i.jsx)(t.a,{href:"https://leetcode.com/problems/merge-k-sorted-lists",children:"https://leetcode.com/problems/merge-k-sorted-lists"})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:"Indice"}),(0,i.jsxs)(t.p,{children:["R\xe9utiliser la fonction pr\xe9c\xe9dente pour fusionner deux listes.",(0,i.jsx)(t.br,{}),"\n","L'id\xe9al est de r\xe9soudre ce probl\xe8me en O(n log (k)) o\xf9 n est la somme des tailles des listes et k le nombre de listes."]})]}),"\n","\n",(0,i.jsxs)(n.A,{file:l.A,lang:"c",show:!0,children:[(0,i.jsx)(t.p,{children:"Solution en O(nlog(k)) avec une approche diviser pour r\xe9gner (o\xf9 n = somme des tailles des listes et k = nombre de listes) :"}),(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"l1"})," = fusionner r\xe9cursivement les k/2 premi\xe8res listes"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"l2"})," = fusionner r\xe9cursivement les k/2 derni\xe8res listes"]}),"\n",(0,i.jsxs)(t.li,{children:["retourner la fusion (avec mergeTwoLists) de ",(0,i.jsx)(t.code,{children:"l1"})," et ",(0,i.jsx)(t.code,{children:"l2"})]}),"\n"]}),(0,i.jsx)(t.p,{children:"Chaque fusion s'effectue en O(n) et il y a log(k) fusions, d'o\xf9 la complexit\xe9 en O(nlog(k))"})]})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},688:(e,t,s)=>{s.d(t,{A:()=>a});s(6540);var i=s(1432),r=s(4164),n=s(3551),l=s(9893);const o="details_JMAC";var c=s(4848);const a=e=>{let{file:t,lang:s,show:a,title:d="Solution",children:m}=e;return(0,c.jsxs)("div",{children:[" ",a&&(0,c.jsxs)(n.B,{className:(0,r.A)("alert alert--success",o),summary:d,children:[m&&(0,c.jsx)(l.A,{children:m}),(0,c.jsx)(i.A,{language:s,children:t})]})]})}},9262:(e,t,s)=>{s.d(t,{A:()=>i});const i="/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n struct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2) {\n    if (list1 == NULL) return list2;\n    if (list2 == NULL) return list1;\n    if (list1->val <= list2->val) {\n        list1->next = mergeTwoLists(list1->next, list2);\n        return list1;\n    }\n    if (list1->val > list2->val) {\n        list2->next = mergeTwoLists(list1, list2->next);\n        return list2;\n    }\n    return NULL;\n}\n\nstruct ListNode* merge(struct ListNode** lists, int i, int j) {\n    if(i + 1 == j) return lists[i];\n    if(i == j) return NULL;\n    \n    int m = (i + j)/2;\n    return mergeTwoLists(merge(lists, i, m), merge(lists, m, j));\n}\n\nstruct ListNode* mergeKLists(struct ListNode** lists, int listsSize) {\n    return merge(lists, 0, listsSize);\n}\n"}}]);