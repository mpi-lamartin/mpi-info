======================================================================
                 Sujet "DAG de processus et mutex"
======================================================================

Dans ce sujet on va manipuler des mutex et des processus parrallèles.
Le sujet est composé de deux grandes parties en C puis en OCaml.



     ========================================================
            Partie 1 -- gestion de DAG de processus
     ========================================================

La partie 1 est elle-même découpée en deux exercices. 

[EXERCICE 1]

Pour le premier exercice on fournit :

 - un fichier c "template" qui montre comment lancer trois threads et
   prendre / libérer un mutex.

 - deux fichiers boite_noire1.h qui donne l'interface vers

 - un fichier compilé boite_noire1.o dont les candidats n'ont pas le
   code source (pour la version public ils seront fournis)

L'objectif du premier exercice est de faire un code qui fait 100
appels à boite_noire le plus rapidement possible en utilisant au plus
10 threads. On ne connaît pas le temps d'exécution de chaque tâche
donc ne s'attend pas à un résultat optimal mais simplement à quelque
chose de plus intelligent que d'avoir chaque thread qui fait 10 appels.


Une bonne solution doit mettre de l'ordre de 6.5s.

Les solutions que l'on s'attend à voir :

 1 - version naive avec aucun nouveau thread et 100 appels à boite_noire
 
 2 - version avec 10 threads chacun faisant 10 appels à boite_noire
 
 3 - version optimisée avec chaque threads faisant des appels à boite
     noire tant qu'il reste des appels à faire (avec une variable
     partagée). Si on néglige le temps de prendre des mutex, on peut
     facilement prouver que cette solution est optimale (toute
     solution où un thread "attend" alors qu'il reste des tâches
     à faire met nécessairement autant ou plus de temps).

[EXERCICE 2]

Pour le deuxième exercice on fournit :

 - deux fichiers boite_noire2.h qui donne l'interface vers

 - un fichier compilé boite_noire2.o dont les candidats n'ont pas le
   code source.

Dans cet exercice on a OBJECTIF tâches à réaliser. Chaque tâche peut
avoir des prérequis et un temps estimé qu'elle met à réaliser. Quand
une tâche A a une tâche B pour prérequis, il faut que B soit fini
avant de pouvoir lancer A et l'objectif et l'on veut finir l'ensemble
des tâches le plus rapidement possible.

Chaque appel aux fonctions prend en paramètre un entier entre 0
(inclu) et OBJECTIF (exclu) correspond à une tâche. L'objectif de cet
exercice est de proposer des heuristiques qui permettent de résoudre
toutes les tâches le plus rapidement possible avec 2 threads mais on
essaiera d'abord d'avoir une solution correcte.

Les fonctions de la boite noire sont a priori toutes "thread safe"
c'est à dire que vous n'avez pas besoin de prendre des mutex avant des
les appeler.


Une bonne solution met 14.5s.

Une solution random c'est 22s.

On utilisera le temps de cet exercice pour leur faire prouver la NP
complétude d'avoir une solution optimale en leur rappellant le fait
que PARTITION est NP-complet (PARTITION c'est le problème où l'on
fournit un multiset S d'entiers et on doit déterminer s'il existe une
partition de S en S1 S2 telle que Σ S1 = Σ S2. Il faut que les
candidats pensent à transformer le problème d'optimisation en décision
puis qu'ils notent que partition revient à avoir des tâches qui ont un
temps mais sans prérequis.


Les solutions que l'on peut s'attendre à voir :

 - version naive, tant qu'il reste des tâches, faire 1000 fois 1000 appels
 - version naïve++, faire la même chose avec un tri topologique
 - version naïve avec threads, deux threads qui parcourent toutes les tâches et font 1000 appels
 - version attendue-- avec threads, parcourir dans l'ordre topologique et chaque thread fait des appels
 - version attendue avec threads parcourir dans l'ordre du temps critique décroissant avec
   TC(t) = max_{t prerequis de p} TC(p) + temps(t)

     ========================================================
                Partie 2 -- vérification et mutex
     ========================================================

L'objectif de cette partie est de travailler sur la vérification de
programmes avec mutex. Dans un premier temps on va travailler sur des
programmes qui ne sont pas mis en parallèle. Comme la plupart des
propriétés sur les programmes sont indécidables, on s'intéressera à
une simplification sur la forme de nos programmes. Nos programmes
correspondront aux types sommes OCaml suivants :

type code =
  | Take of int
  | Release of int
  | Call of string
  | Sequence of code*code
  | IfThen of code*code
              
type programme = (string*code) list
        

Un code décrit des instructions :

  - une instruction "Take i" dit que le programme prend le mutex
    numéro i,

  - une instruction "Release i" dit que le programme libère le
    mutex numéro i,

  - "IfThen(a,b)" dit que le programme fait un choix (sur une
    condition qui est inconnu dans notre simplification, on pourra
    supposer que c'est au hasard) entre exécuter le code a ou b,
   
  - "Sequence(a,b)" décrit que le programme lance a puis b et

  - "Call s" décrit que le programme appelle la fonction "s".


[QUESTION 1]
[QUESTION 2]
[QUESTION 3]

=> l'objectif principal de ces question est que les élèves copient le
   type somme et comprennent sa sémantique mais on en profite pour les
   tester un peu.

[QUESTION 4]

=> là on commence à voir les gens qui ont compris les grammaires

[QUESTION 5]

=> n'importe quel type un peu correct marche mais on veut un symbole
   initial et une liste de production. Comme pour les graphes on peut
   être plus efficace en stockant en "liste d'adjacence", cad les
   productions de A dans un tableau à la case A mais en pratique un
   simple triplet (initial, liste de symboles, liste de dérivations)
   suffit.

[QUESTION 6]

=> Question qui serait très classique (et donc réussie) sur les
   automates et est très difficile pour les élèves dans le contexte
   CFG. Il faut faire un calcul d'accessibilité et de dériviation
   finie. Pour le calcul des dérivations finies on fait un point
   fixe : À chaque étape on rajoute les symboles qui ont (au moins)
   une production qui ne produit que des terminaux ou des symboles
   dont on sait déjà qu'ils ont des dérivations finies.

   Ensuite on enlève tous les symboles qui ne terminent pas (et
   toutes les productions qui les contiennent) puis on fait un calcul
   simple d'accessibilité.

   Il faut remarquer que les deux opérations d'élagage ne commutent
   pas : il faut commencer par enlever tous les symboles qui n'ont pas
   de dérivations finies !

[QUESTION 7]

=> il faut dérouler la def, en pratique les meilleurs candidats se sont arrêté à cette question.

[QUESTION 8]

=> il s'agit surtout d'une question de compréhension, on s'attend pas
vraiment à une preuve très formelle mais ça permet aussi de remarquer
que l'on peut travailler avec un seul mutex à la fois.

[QUESTION 9]

=> Grâce à la question 8 on peut travailler mutex par mutex et donc on
peut retirer tous les Take j (j≠i) et repérer si la grammaire peut
générer deux Take i consécutifs. Cela revient à l'intersection d'une
CFG et d'un automate mais ici on peut directement annoter chaque
symbole de la grammaire par l'un des quatres symboles suivants :
"produit un mot avec blocage", "produit un mot qui commence par Take i",
"produit un mot qui finit par Take i", "produit le mot vide"
ensuite chaque règle A->BC est transformée, en les règles suivantes
(on part d'une grammaire émondée où tout symbole produit un mot) :

  A_bloque -> B_bloque
  A_bloque -> C_bloque
  A_bloque -> B_fini C_commence


  A_commence -> B_commence
  A_commence -> B_vide C_commence
  
  A_fini -> C_fini
  A_fini -> B_fini C_vide

  A_vide -> B_vide C_vide

pour une dérivation A->B on a A_annot -> B_annot,
pour une dérivation A->ε on a A_vide -> ε 
et pour une dérivation A-> terminal on a
A_commence -> ε et A_fini -> ε si terminal est take

puis tester si la Start_bloque produit un mot; qui sera forcément le
mot vide. Noter que la grammaire est juste utilisée comme système
logique, on peut aussi voir la grammaire comme un système d'équation.

[QUESTION 10] Étant donné deux programmes séquentiels a_1 ... a_m et
b_1 ... b_n on note access(i,j,M) si le programme peut être à
l'instruction i du programme A et j du programme B en prenant les
mutex de l'ensemble M.

On a :
   access(i,j,M) -> access(i+1,j,M \ {k}) si a_i est release k
   access(i,j,M) -> access(i,j+1,M \ {k}) si b_j est release k
   access(i,j,M) -> access(i+1,j,M U {k}) si a_i est take k avec k∉M
   access(i,j,M) -> access(i,j+1,M U {k}) si b_j est take k avec k∉M

ce qui se résoud bien par programmation dynamique en n×m×2^{nombre de mutex}.
(en fait l'ensemble des triplets (i,j,M) est bien plus petit que ça en pratique)

[QUESTION 11]

Cette question était là dans le cas, très improbable, d'un candidat
qui aurait fini les questions ci-haut. Étant donné le programme
séquentiel p1...pm et la grammaire pour le programme non séquentiel,
on considére

acces(A,i,j,M_1,M_2) = peut-on produire un mot de A en avançant de i à j dans le programme séquentiel avec l'ensemble M1 des mutex pris et en arrivant à l'ensemble M2 des mutex pris

puis en déroulant les formules possible pour acces, ce qui donne une
grammaire (car les formules d'acces ne forment plus un DAG).
